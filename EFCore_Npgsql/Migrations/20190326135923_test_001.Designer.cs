// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Tutorial.Database;

namespace Tutorial.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20190326135923_test_001")]
    partial class test_001
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Tutorial.Characters.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Inventory");

                    b.Property<string>("Lasname");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<string>("Social");

                    b.Property<int?>("StateId");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("Tutorial.Characters.States", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Armor");

                    b.Property<int>("Health");

                    b.HasKey("Id");

                    b.ToTable("States");
                });

            modelBuilder.Entity("Tutorial.Characters.Character", b =>
                {
                    b.HasOne("Tutorial.Characters.States", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.OwnsOne("Tutorial.Characters.Finances", "Finance", b1 =>
                        {
                            b1.Property<int>("CharacterId");

                            b1.Property<int>("Bank");

                            b1.Property<int>("Cash");

                            b1.HasKey("CharacterId");

                            b1.ToTable("Characters");

                            b1.HasOne("Tutorial.Characters.Character")
                                .WithOne("Finance")
                                .HasForeignKey("Tutorial.Characters.Finances", "CharacterId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
